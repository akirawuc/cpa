// Generated by @wagmi/cli@1.3.0 on 8/13/2023 at 1:46:41 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Campaign
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const campaignABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_updater", internalType: "address", type: "address" }],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "reward",
        internalType: "int256",
        type: "int256",
        indexed: false,
      },
      { name: "cpa", internalType: "int256", type: "int256", indexed: false },
      { name: "query", internalType: "string", type: "string", indexed: false },
    ],
    name: "CreateCampaign",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "campaignId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "CreateInfluencer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "campaignId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      { name: "nft", internalType: "address", type: "address", indexed: true },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "CreateNFT",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnerSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "campaignId",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "influencer",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      { name: "click", internalType: "int256", type: "int256", indexed: false },
    ],
    name: "UpdateInfluencer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "campaigns",
    outputs: [
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address", type: "address" },
      { name: "nft", internalType: "address", type: "address" },
      { name: "reward", internalType: "int256", type: "int256" },
      { name: "cpa", internalType: "int256", type: "int256" },
      { name: "audience", internalType: "int256", type: "int256" },
      { name: "query", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "campaignsOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "changeOwner",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_updater", internalType: "address", type: "address" }],
    name: "changeUpdater",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "reward", internalType: "int256", type: "int256" },
      { name: "cpa", internalType: "int256", type: "int256" },
      { name: "query", internalType: "string", type: "string" },
    ],
    name: "createCampaign",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "campaignId", internalType: "uint256", type: "uint256" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "createInfluencer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "nft", internalType: "address", type: "address" }],
    name: "createNFT",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getBalance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getUpdater",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "influencers",
    outputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "click", internalType: "int256", type: "int256" },
      { name: "reward", internalType: "int256", type: "int256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalCampaignAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "campaignId", internalType: "uint256", type: "uint256" },
      { name: "influencerOwner", internalType: "address", type: "address" },
      { name: "click", internalType: "int256", type: "int256" },
    ],
    name: "updateInfluencer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "campaignId", internalType: "uint256", type: "uint256" }],
    name: "withdrawReward",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link campaignABI}__.
 */
export function useCampaignRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof campaignABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: campaignABI,
    ...config,
  } as UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"campaigns"`.
 */
export function useCampaignCampaigns<
  TFunctionName extends "campaigns",
  TSelectData = ReadContractResult<typeof campaignABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: campaignABI,
    functionName: "campaigns",
    ...config,
  } as UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"campaignsOwner"`.
 */
export function useCampaignCampaignsOwner<
  TFunctionName extends "campaignsOwner",
  TSelectData = ReadContractResult<typeof campaignABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: campaignABI,
    functionName: "campaignsOwner",
    ...config,
  } as UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"getBalance"`.
 */
export function useCampaignGetBalance<
  TFunctionName extends "getBalance",
  TSelectData = ReadContractResult<typeof campaignABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: campaignABI,
    functionName: "getBalance",
    ...config,
  } as UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"getOwner"`.
 */
export function useCampaignGetOwner<
  TFunctionName extends "getOwner",
  TSelectData = ReadContractResult<typeof campaignABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: campaignABI,
    functionName: "getOwner",
    ...config,
  } as UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"getUpdater"`.
 */
export function useCampaignGetUpdater<
  TFunctionName extends "getUpdater",
  TSelectData = ReadContractResult<typeof campaignABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: campaignABI,
    functionName: "getUpdater",
    ...config,
  } as UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"influencers"`.
 */
export function useCampaignInfluencers<
  TFunctionName extends "influencers",
  TSelectData = ReadContractResult<typeof campaignABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: campaignABI,
    functionName: "influencers",
    ...config,
  } as UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"totalCampaignAmount"`.
 */
export function useCampaignTotalCampaignAmount<
  TFunctionName extends "totalCampaignAmount",
  TSelectData = ReadContractResult<typeof campaignABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: campaignABI,
    functionName: "totalCampaignAmount",
    ...config,
  } as UseContractReadConfig<typeof campaignABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link campaignABI}__.
 */
export function useCampaignWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof campaignABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof campaignABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof campaignABI, TFunctionName, TMode>({
    abi: campaignABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"changeOwner"`.
 */
export function useCampaignChangeOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof campaignABI,
          "changeOwner"
        >["request"]["abi"],
        "changeOwner",
        TMode
      > & { functionName?: "changeOwner" }
    : UseContractWriteConfig<typeof campaignABI, "changeOwner", TMode> & {
        abi?: never;
        functionName?: "changeOwner";
      } = {} as any,
) {
  return useContractWrite<typeof campaignABI, "changeOwner", TMode>({
    abi: campaignABI,
    functionName: "changeOwner",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"changeUpdater"`.
 */
export function useCampaignChangeUpdater<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof campaignABI,
          "changeUpdater"
        >["request"]["abi"],
        "changeUpdater",
        TMode
      > & { functionName?: "changeUpdater" }
    : UseContractWriteConfig<typeof campaignABI, "changeUpdater", TMode> & {
        abi?: never;
        functionName?: "changeUpdater";
      } = {} as any,
) {
  return useContractWrite<typeof campaignABI, "changeUpdater", TMode>({
    abi: campaignABI,
    functionName: "changeUpdater",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"createCampaign"`.
 */
export function useCampaignCreateCampaign<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof campaignABI,
          "createCampaign"
        >["request"]["abi"],
        "createCampaign",
        TMode
      > & { functionName?: "createCampaign" }
    : UseContractWriteConfig<typeof campaignABI, "createCampaign", TMode> & {
        abi?: never;
        functionName?: "createCampaign";
      } = {} as any,
) {
  return useContractWrite<typeof campaignABI, "createCampaign", TMode>({
    abi: campaignABI,
    functionName: "createCampaign",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"createInfluencer"`.
 */
export function useCampaignCreateInfluencer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof campaignABI,
          "createInfluencer"
        >["request"]["abi"],
        "createInfluencer",
        TMode
      > & { functionName?: "createInfluencer" }
    : UseContractWriteConfig<typeof campaignABI, "createInfluencer", TMode> & {
        abi?: never;
        functionName?: "createInfluencer";
      } = {} as any,
) {
  return useContractWrite<typeof campaignABI, "createInfluencer", TMode>({
    abi: campaignABI,
    functionName: "createInfluencer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"createNFT"`.
 */
export function useCampaignCreateNft<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof campaignABI,
          "createNFT"
        >["request"]["abi"],
        "createNFT",
        TMode
      > & { functionName?: "createNFT" }
    : UseContractWriteConfig<typeof campaignABI, "createNFT", TMode> & {
        abi?: never;
        functionName?: "createNFT";
      } = {} as any,
) {
  return useContractWrite<typeof campaignABI, "createNFT", TMode>({
    abi: campaignABI,
    functionName: "createNFT",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"updateInfluencer"`.
 */
export function useCampaignUpdateInfluencer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof campaignABI,
          "updateInfluencer"
        >["request"]["abi"],
        "updateInfluencer",
        TMode
      > & { functionName?: "updateInfluencer" }
    : UseContractWriteConfig<typeof campaignABI, "updateInfluencer", TMode> & {
        abi?: never;
        functionName?: "updateInfluencer";
      } = {} as any,
) {
  return useContractWrite<typeof campaignABI, "updateInfluencer", TMode>({
    abi: campaignABI,
    functionName: "updateInfluencer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"withdrawReward"`.
 */
export function useCampaignWithdrawReward<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof campaignABI,
          "withdrawReward"
        >["request"]["abi"],
        "withdrawReward",
        TMode
      > & { functionName?: "withdrawReward" }
    : UseContractWriteConfig<typeof campaignABI, "withdrawReward", TMode> & {
        abi?: never;
        functionName?: "withdrawReward";
      } = {} as any,
) {
  return useContractWrite<typeof campaignABI, "withdrawReward", TMode>({
    abi: campaignABI,
    functionName: "withdrawReward",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link campaignABI}__.
 */
export function usePrepareCampaignWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof campaignABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: campaignABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof campaignABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"changeOwner"`.
 */
export function usePrepareCampaignChangeOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof campaignABI, "changeOwner">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: campaignABI,
    functionName: "changeOwner",
    ...config,
  } as UsePrepareContractWriteConfig<typeof campaignABI, "changeOwner">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"changeUpdater"`.
 */
export function usePrepareCampaignChangeUpdater(
  config: Omit<
    UsePrepareContractWriteConfig<typeof campaignABI, "changeUpdater">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: campaignABI,
    functionName: "changeUpdater",
    ...config,
  } as UsePrepareContractWriteConfig<typeof campaignABI, "changeUpdater">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"createCampaign"`.
 */
export function usePrepareCampaignCreateCampaign(
  config: Omit<
    UsePrepareContractWriteConfig<typeof campaignABI, "createCampaign">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: campaignABI,
    functionName: "createCampaign",
    ...config,
  } as UsePrepareContractWriteConfig<typeof campaignABI, "createCampaign">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"createInfluencer"`.
 */
export function usePrepareCampaignCreateInfluencer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof campaignABI, "createInfluencer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: campaignABI,
    functionName: "createInfluencer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof campaignABI, "createInfluencer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"createNFT"`.
 */
export function usePrepareCampaignCreateNft(
  config: Omit<
    UsePrepareContractWriteConfig<typeof campaignABI, "createNFT">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: campaignABI,
    functionName: "createNFT",
    ...config,
  } as UsePrepareContractWriteConfig<typeof campaignABI, "createNFT">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"updateInfluencer"`.
 */
export function usePrepareCampaignUpdateInfluencer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof campaignABI, "updateInfluencer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: campaignABI,
    functionName: "updateInfluencer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof campaignABI, "updateInfluencer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link campaignABI}__ and `functionName` set to `"withdrawReward"`.
 */
export function usePrepareCampaignWithdrawReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof campaignABI, "withdrawReward">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: campaignABI,
    functionName: "withdrawReward",
    ...config,
  } as UsePrepareContractWriteConfig<typeof campaignABI, "withdrawReward">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link campaignABI}__.
 */
export function useCampaignEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof campaignABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: campaignABI,
    ...config,
  } as UseContractEventConfig<typeof campaignABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link campaignABI}__ and `eventName` set to `"CreateCampaign"`.
 */
export function useCampaignCreateCampaignEvent(
  config: Omit<
    UseContractEventConfig<typeof campaignABI, "CreateCampaign">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: campaignABI,
    eventName: "CreateCampaign",
    ...config,
  } as UseContractEventConfig<typeof campaignABI, "CreateCampaign">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link campaignABI}__ and `eventName` set to `"CreateInfluencer"`.
 */
export function useCampaignCreateInfluencerEvent(
  config: Omit<
    UseContractEventConfig<typeof campaignABI, "CreateInfluencer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: campaignABI,
    eventName: "CreateInfluencer",
    ...config,
  } as UseContractEventConfig<typeof campaignABI, "CreateInfluencer">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link campaignABI}__ and `eventName` set to `"CreateNFT"`.
 */
export function useCampaignCreateNftEvent(
  config: Omit<
    UseContractEventConfig<typeof campaignABI, "CreateNFT">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: campaignABI,
    eventName: "CreateNFT",
    ...config,
  } as UseContractEventConfig<typeof campaignABI, "CreateNFT">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link campaignABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useCampaignOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof campaignABI, "OwnerSet">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: campaignABI,
    eventName: "OwnerSet",
    ...config,
  } as UseContractEventConfig<typeof campaignABI, "OwnerSet">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link campaignABI}__ and `eventName` set to `"UpdateInfluencer"`.
 */
export function useCampaignUpdateInfluencerEvent(
  config: Omit<
    UseContractEventConfig<typeof campaignABI, "UpdateInfluencer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: campaignABI,
    eventName: "UpdateInfluencer",
    ...config,
  } as UseContractEventConfig<typeof campaignABI, "UpdateInfluencer">);
}
